{"version":3,"sources":["definitions/question-type.ts","components/buttons/answer-option/answer-option.tsx","components/panes/header/header.tsx","components/panes/question-pane/question-pane.tsx","scripts/load-saved-question-prefs.ts","components/pop-overs/option-menu/option-menu.tsx","scripts/set-question-prefs.ts","components/buttons/next-button/next-button.tsx","components/labels/feedback-message.tsx","scripts/default-question.ts","scripts/filter-questions-by-topic.ts","scripts/fetch-questions.ts","components/buttons/reset-button/reset-button.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["QuestionType","props","onClick","clickCallBackFunction","responseId","className","answerCaption","questionsMenuClickCallBack","progressLabelCaption","questionText","loadSavedQuestionPreference","result","window","localStorage","getItem","console","log","setItem","useState","All","questionOption","setQuestionOption","radioOptionChangeHandler","option","pref","useEffect","currentPreference","loadCurrentQuestionPreferences","Html","Css","Javascript","optionMenuCloseButtonClick","buttonClickHandler","type","buttonText","messageOptions","cssClass","messageText","defaultQuestion","question","id","topic","choices","a","b","answer","filterQuestionsByTopic","input","filter","API","process","fetchQuestions","getQuestionsFromAPI","questions","filteredQuestions","shuffleQuestionArray","slice","axios","get","data","cloneArray","Array","from","i","length","j","Math","floor","random","temp","loadQuestions","questionPreference","App","currentQuestionIndex","setCurrentQuestionIndex","setQuestions","optionMenuStatus","setOptionMenuStatus","questionType","setQuestionType","playerScore","setPlayerScore","feedBackButtonsVisible","setFeedbackButtonsVisible","message","color","feedbackMessage","setFeedbackMessage","nextButtonCaption","canAnswerQuestion","setCanAnswerQuestion","gameOver","setGameOver","asyncResponse","resetGame","refreshQuestions","answerClickCallEventHandler","Object","entries","map","answerOption","index","key","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.aacea7e1.chunk.js","sourcesContent":["export enum QuestionType {\r\n  All = \"all\",\r\n  Html = \"html\",\r\n  Css = \"css\",\r\n  Javascript = \"javascript\"\r\n}\r\n","import React from \"react\";\r\nimport \"./answer-option.css\";\r\n\r\ninterface IProps {\r\n  answerCaption: string\r\n  responseId: string\r\n  clickCallBackFunction: (responseId: string) => void\r\n}\r\n\r\nexport default function (props: IProps) {\r\n  return (\r\n    <div onClick={() => props.clickCallBackFunction(props.responseId)} className=\"answer-caption\">\r\n      <p className=\"centered-answer-option-text\"> {props.answerCaption} </p>\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\";\r\nimport \"./header.css\";\r\n\r\ninterface IProps {\r\n  questionsMenuClickCallBack: (e: any) => void\r\n}\r\nexport default function (props: IProps) {\r\n\r\n  return (\r\n    <div className=\"app-header\">\r\n      <div className=\"app-name\">\r\n        <p>CHINGU TRIVIA</p>\r\n      </div>\r\n      <div className=\"header-home\">\r\n        <p> Home </p>\r\n      </div>\r\n      <div className=\"header-questions\" onClick={props.questionsMenuClickCallBack}>\r\n        <p> Questions </p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\"\r\nimport \"./question-pane.css\"\r\n\r\ninterface IProps {\r\n  progressLabelCaption: string\r\n  questionText: string\r\n}\r\nexport default function (props: IProps) {\r\n  return (\r\n    <div className=\"question-pane\">\r\n      <div className=\"progress-label-container\">\r\n        <div className=\"progress-label\">\r\n          <p>{props.progressLabelCaption}</p>\r\n        </div>\r\n      </div>\r\n      <div className=\"question-text-label\">\r\n        <p>{props.questionText}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","export function loadSavedQuestionPreference(): string {\r\n  /**\r\n   * read session\r\n   */\r\n  const result = window.localStorage.getItem(\"question-type-preference\")\r\n  if (result === null || result === \"null\") {\r\n    console.log(\"No preferences for question type found: creating\")\r\n    window.localStorage.setItem(\"question-type-preference\", \"all\")\r\n    return \"all\"\r\n  }\r\n  return result\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { QuestionType } from \"../../../definitions/question-type\";\r\nimport { loadSavedQuestionPreference } from \"../../../scripts/load-saved-question-prefs\";\r\nimport { setQuestionPreferences } from \"../../../scripts/set-question-prefs\";\r\nimport \"./option-menu.css\"\r\n\r\ninterface IProps {\r\n  optionMenuCloseButtonClick: () => void\r\n}\r\n\r\nexport default function (props: IProps) {\r\n\r\n  const [questionOption, setQuestionOption] = useState(QuestionType.All)\r\n  const radioOptionChangeHandler = (option: QuestionType) => {\r\n    // Write the changes to localStorage\r\n    setQuestionPreferences(option);\r\n    setQuestionOption(option);\r\n  }\r\n\r\n  useEffect(() => {\r\n    function loadCurrentQuestionPreferences() {\r\n      const currentPreference = loadSavedQuestionPreference() as QuestionType\r\n      setQuestionOption(currentPreference)\r\n    }\r\n    loadCurrentQuestionPreferences();\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"options-window\">\r\n      <div className=\"options-inner-frame\">\r\n        <div className=\"option-header\">\r\n          <p className=\"h4\">Question Types</p>\r\n        </div>\r\n        <div className={`question-option option-all ${questionOption === QuestionType.All ? \"option-selected\" : \"\"}`} onClick={() => radioOptionChangeHandler(QuestionType.All)}>\r\n          All\r\n        </div>\r\n        <div className={`question-option option-html ${questionOption === QuestionType.Html ? \"option-selected\" : \"\"}`} onClick={() => radioOptionChangeHandler(QuestionType.Html)}>\r\n          HTML\r\n        </div>\r\n        <div className={`question-option option-css ${questionOption === QuestionType.Css ? \"option-selected\" : \"\"}`} onClick={() => radioOptionChangeHandler(QuestionType.Css)}>\r\n          CSS\r\n        </div>\r\n        <div className={`question-option option-js ${questionOption === QuestionType.Javascript ? \"option-selected\" : \"\"}`} onClick={() => radioOptionChangeHandler(QuestionType.Javascript)}>\r\n          Javascript\r\n        </div>\r\n        <div onClick={props.optionMenuCloseButtonClick} className=\"options-close-window\">\r\n          Close\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { QuestionType } from \"../definitions/question-type\";\r\n\r\nexport function setQuestionPreferences(pref: QuestionType): void {\r\n  window.localStorage.setItem(\"question-type-preference\", pref)\r\n}\r\n","import React from \"react\";\r\nimport \"./next-button.css\";\r\n\r\ninterface IProps {\r\n  buttonText: string\r\n  buttonClickHandler: () => void;\r\n}\r\nexport default function (props: IProps) {\r\n  return (\r\n    <div>\r\n      <button onClick={props.buttonClickHandler} type=\"button\" className=\"btn btn-primary next-button btn-text-color\">{props.buttonText}</button>\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\";\r\nimport \"./feedback-message.css\"\r\n\r\ninterface IProps {\r\n  messageOptions: {\r\n    messageText: string,\r\n    cssClass: string\r\n  }\r\n}\r\n\r\nexport default function (props: IProps) {\r\n  return (\r\n    <div className={`feedback-message-label ${props.messageOptions.cssClass}`}>\r\n      <p>{props.messageOptions.messageText} </p>\r\n    </div>\r\n  )\r\n}\r\n","import { Question } from \"../interfaces/question\";\r\n\r\nexport const defaultQuestion: Question[] = [{\r\n  question: \"default\",\r\n  id: -1,\r\n  topic: \"default\",\r\n  choices: {\r\n    a: \"yes\",\r\n    b: \"no\"\r\n  },\r\n  answer: \"b\"\r\n}]\r\n","import { QuestionType } from \"../definitions/question-type\"\r\nimport { Question } from \"../interfaces/question\"\r\n\r\nexport function filterQuestionsByTopic(input: Question[], topic: QuestionType): Question[] {\r\n  if (topic === \"all\") {\r\n    return input\r\n  }\r\n  return input.filter((question) => {\r\n    return question.topic === topic\r\n  })\r\n}\r\n","import axios from \"axios\";\r\nimport { QuestionType } from \"../definitions/question-type\";\r\nimport { Question } from \"../interfaces/question\";\r\nimport { filterQuestionsByTopic } from \"./filter-questions-by-topic\";\r\nconst API = process.env.REACT_APP_API_ENDPOINT as string\r\n\r\nexport async function fetchQuestions(topic?: QuestionType) {\r\n  const questions = await getQuestionsFromAPI();\r\n\r\n  if (topic) {\r\n    const filteredQuestions = filterQuestionsByTopic(questions, topic)\r\n    return shuffleQuestionArray(filteredQuestions).slice(0, 10)\r\n  }\r\n  return shuffleQuestionArray(questions).slice(0, 10)\r\n}\r\n\r\nasync function getQuestionsFromAPI() {\r\n  const result = await axios.get(API)\r\n  return result.data\r\n}\r\n\r\nfunction shuffleQuestionArray(questions: Question[]): Question[] {\r\n  const cloneArray = Array.from(questions);\r\n\r\n  for (let i = cloneArray.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * i)\r\n    const temp = cloneArray[i]\r\n    cloneArray[i] = cloneArray[j]\r\n    cloneArray[j] = temp\r\n  }\r\n  return cloneArray;\r\n}\r\n\r\n","import React from \"react\";\r\nimport \"./reset-button.css\";\r\n\r\ninterface IProps {\r\n  buttonClickHandler: () => void;\r\n}\r\n\r\nexport default function (props: IProps) {\r\n  return (\r\n    <div>\r\n      <button onClick={props.buttonClickHandler} type=\"button\" className=\"btn btn-primary next-button btn-text-color\">RESTART QUIZ</button>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport AnswerOption from './components/buttons/answer-option/answer-option';\nimport Header from \"./components/panes/header/header\"\nimport QuestionPane from './components/panes/question-pane/question-pane';\nimport QuestionFilterOption from './components/pop-overs/option-menu/option-menu';\nimport NextButton from \"./components/buttons/next-button/next-button\";\nimport FeedbackMessage from \"./components/labels/feedback-message\"\nimport { QuestionType } from './definitions/question-type';\nimport { Question } from './interfaces/question';\nimport { defaultQuestion } from './scripts/default-question';\n\n\nimport { fetchQuestions } from \"./scripts/fetch-questions\"\nimport { loadSavedQuestionPreference } from './scripts/load-saved-question-prefs';\nimport userEvent from '@testing-library/user-event';\nimport ResetButton from './components/buttons/reset-button/reset-button';\n\nasync function loadQuestions(questionPreference: QuestionType) {\n  return fetchQuestions(questionPreference);\n}\n\nfunction App() {\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [questions, setQuestions] = useState(defaultQuestion);\n  const [optionMenuStatus, setOptionMenuStatus] = useState(false);\n  const [questionType, setQuestionType] = useState(loadSavedQuestionPreference());\n  const [playerScore, setPlayerScore] = useState(0);\n  const [feedBackButtonsVisible, setFeedbackButtonsVisible] = useState(false);\n  const [feedbackMessage, setFeedbackMessage] = useState({ message: \"\", color: \"feedback-message-black\" });\n  const [nextButtonCaption, setNextButtonQuestion] = useState(\"NEXT\");\n  const [canAnswerQuestion, setCanAnswerQuestion] = useState(true);\n  const [gameOver, setGameOver] = useState(false)\n\n  async function fetchQuestions() {\n    const questionPreference = loadSavedQuestionPreference();\n    try {\n      const asyncResponse = await loadQuestions(questionPreference as QuestionType);\n      setQuestions(asyncResponse as Question[])\n      setQuestionType(questionPreference);\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  async function refreshQuestions() {\n    const asyncResponse = await loadQuestions(questionType as QuestionType);\n    setQuestions(asyncResponse as Question[])\n  }\n\n  const resetGame = () => {\n    setGameOver(false)\n    setCanAnswerQuestion(true)\n    setFeedbackButtonsVisible(false)\n    setPlayerScore(0)\n    setCurrentQuestionIndex(0)\n    setFeedbackMessage({ message: \"\", color: \"feedback-message-black\" })\n    fetchQuestions();\n  }\n\n  useEffect(() => {\n    fetchQuestions();\n  }, [])\n\n  useEffect(() => {\n    refreshQuestions();\n  }, [questionType])\n\n  useEffect(() => {\n    console.log(`${playerScore}| ${questions.length}`)\n  }, [playerScore])\n\n  const convertAnswerOptionsToArray = () => {\n    return Object.entries(questions[currentQuestionIndex].choices) as any[]\n  }\n\n  const answerClickCallEventHandler = (responseId: string) => {\n    if (canAnswerQuestion === true) {\n      if (responseId === questions[currentQuestionIndex].answer) {\n        // Answer is correct\n        setCanAnswerQuestion(false)\n        setFeedbackMessage({ message: \"That's correct.\", color: \"feedback-message-correct\" })\n        setPlayerScore(playerScore + 1)\n        setFeedbackButtonsVisible(true)\n      } else {\n        // Incorrect answer.\n        setCanAnswerQuestion(false)\n        setFeedbackMessage({ message: \"Sorry, that answer is not correct.\", color: \"feedback-message-wrong\" })\n        setFeedbackButtonsVisible(true)\n      }\n    }\n  }\n  const handleNextButtonClick = () => {\n    // POIJ: fix index out of range issues\n    setCanAnswerQuestion(true);\n    setFeedbackButtonsVisible(false);\n    if ((currentQuestionIndex + 1) < questions.length) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1)\n    } else {\n      setCanAnswerQuestion(false)\n      setGameOver(true)\n      setFeedbackMessage({ message: `Thanks for playing. Your score is ${playerScore}/${questions.length}`, color: \"feedback-message-black\" });\n      setFeedbackButtonsVisible(true)\n    }\n  }\n\n\n\n  const questionMenuClickHandler = () => {\n    setOptionMenuStatus(true);\n  }\n\n  const questionMenuCloseButtonClickHandler = () => {\n    setOptionMenuStatus(false);\n    // If user changes their question type, reset everything\n    if (questionType !== loadSavedQuestionPreference()) {\n      setQuestionType(loadSavedQuestionPreference())\n      resetGame();\n    }\n  }\n\n  const clearGameButtonClickHandler = () => {\n    resetGame()\n  }\n\n  return (\n    <div className=\"App\">\n      {optionMenuStatus === true && <QuestionFilterOption optionMenuCloseButtonClick={questionMenuCloseButtonClickHandler} />}\n      <Header questionsMenuClickCallBack={questionMenuClickHandler} />\n      <div className=\"interaction-pane\">\n        <QuestionPane progressLabelCaption={`Question ${currentQuestionIndex + 1}/${questions.length}`} questionText={questions[currentQuestionIndex].question} />\n        <div className=\"answer-pane\">\n          {convertAnswerOptionsToArray().map((answerOption, index) => {\n            return (\n              <AnswerOption key={index} responseId={answerOption[0]} answerCaption={answerOption[1]} clickCallBackFunction={answerClickCallEventHandler} />\n            )\n          })}\n        </div>\n        <div className=\"feedback-pane\">\n          {feedBackButtonsVisible === true && <FeedbackMessage messageOptions={{ messageText: feedbackMessage.message, cssClass: feedbackMessage.color }} />}\n          {(feedBackButtonsVisible === true && gameOver === false) && <NextButton buttonText={nextButtonCaption} buttonClickHandler={handleNextButtonClick} />}\n          {(feedBackButtonsVisible === true && gameOver === true) && <ResetButton buttonClickHandler={clearGameButtonClickHandler} />}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}